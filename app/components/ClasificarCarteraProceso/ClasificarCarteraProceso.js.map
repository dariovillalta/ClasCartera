{"version":3,"sources":["components/ClasificarCarteraProceso/ClasificarCarteraProceso.js"],"names":["myWorker","Worker","tamanoFinalBandera","tamanoActualBandera","camposGuardar","arregloCamposTablasSeleccionadas","procesosACalcular","capacidadDeudor","diasMora","disponibilidadGarantias","entornoEconomico","tiposCredito","categoriasClasificacion","criteriosDeterioro","banderaGuardarResultadosTamActual","banderaGuardarResultadosTamFinal","ClasificarCarteraProceso","props","state","widthActual","tablasOrginales","tablasSeleccionadas","opcionesTablasSeleccionadas","loadTables","bind","selectTable","iniciarCalculo","tablasGuardarCampos","verificarGuardarCampos","verificarSeleccionoTablas","creandoArreglos","fetchDataComportamientoPago","getPrestamoTablaComportamientoPago","getPrestamoCamposDeTablaComportamientoPago","getPlanPagoTablaComportamientoPago","getPlanPagoCamposDeTablaComportamientoPago","initWebWorkerComportamientoPago","propiedadDeObjetoExisteEnTablaCampos","verificarProcesosAClasificar","obtenerTipoCredito","obtenerTipoCreditoCampos","fetchDataTipoCredito","fetchDataReglasTipoCreditoCampos","fetchDataCamposReglasTipoCreditoCampos","verificarCamposReglasTipoCreditoCampos","fetchDataValoresReglasTipoCreditoCampos","verificarValoresReglasTipoCreditoCampos","verifyTypeCreditFinal","checkFinishMethods","onmessage","event","console","log","data","transaction","sql","Transaction","pool","begin","err","rolledBack","on","aborted","request","Request","query","result","rollback","commit","i","recordset","length","active","setState","index","existeTablaEnConf","ID","tablasSelCopiaTemp","push","undefined","tipoCreditoNombre","nombre","tipoCredito","alert","tablaID","posicionArregloTablasSel","usuario","password","contrasena","servidor","basedatos","baseDatos","tabla","ConnectionPool","user","server","database","stream","connectionTimeout","requestTimeout","max","min","idleTimeoutMillis","options","useUTC","connect","valoresTabla","identificadorCliente","filter","object","funcion","localeCompare","identificadorPrestamo","camposAGuardarCliente","camposAGuardarPrestamo","splice","tipo","concat","self","e","verificarComportamientoPago","verificarTipoCredito","verificarTipoCliente","verificarClasCategoria","calcularComportamientoPago","primeraVezEntra","prestamoTablaID","ComportamientoPago","getFieldsFromCamposTable","camposDePrestamoTabla","valoresDeTablaPrestamo","planPagoTablaID","getPlanPagosCamposDeTablaComportamientoPago","camposDePlanPagoTabla","valoresDeTablaPlanPago","prestamoTabla","getFieldsComportamientoPago","idClientePrestamoCampoID","idClientePlanPagoCampoID","numeroPrestamoCampoID","numeroPlanPagoCampoID","pagoCapitalPrestamoCampoID","pagoCapitalPlanPagoCampoID","pagoImpuestosPrestamoCampoID","pagoImpuestosPlanPagoCampoID","fechaPrestamoCampoID","fechaPlanPagoCampoID","banderaMetodoLlamado","callbackParam","camposTabla","Object","keys","forEach","key","arregloReglasTipoCreditos","arregloTipoCreditos","j","regla","campoCampoID","campoValor","idsValores","valor","split","k","esListaValor","id","esLista","valorValores","arreglo","identificadorCampoNombre","verifyResultID","verifyResultField","objeto","prop","saveResultID","idObjeto","isNaN","saveResultFieldInt","saveResultFieldString","objetoV","nombreV","identificador","idObjetoV","valorV","fecha","Date","formatDateCreation","date","monthNames","day","getDate","monthIndex","getMonth","year","getFullYear","height","width","display","alignItems","justifyContent","overflowX","overflowY","whiteSpace","borderRadius","padding","border","position","backgroundColor","top","left","transform","borderBottom","textAlign","verticalAlign","borderTop","color","fontSize","fontWeight","React","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport sql from 'mssql';\n\nimport SeleccionarTablaClasificarCarteraProceso from './SeleccionarTablaClasificarCarteraProceso.js';\nimport ConfiguracionTablasClasificar from './ConfiguracionTablasClasificar.js';\n\nimport {constructor} from \"../ClasificarCreditoD.js\";\n\nconst myWorker = new Worker(\"./components/ClasificarCredito.js\");\n\n//import \"../../libs/moment/min/moment.min.js\";\n\nvar tamanoFinalBandera = 0, tamanoActualBandera = 0, camposGuardar, arregloCamposTablasSeleccionadas = [];\nvar procesosACalcular = {capacidadDeudor: false, diasMora: false, disponibilidadGarantias: false, entornoEconomico: false, tiposCredito: false, categoriasClasificacion: false, criteriosDeterioro: false};\nvar banderaGuardarResultadosTamActual, banderaGuardarResultadosTamFinal;\n\nexport default class ClasificarCarteraProceso extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            widthActual: \"33%\",\n            tablasOrginales: [],\n            tablasSeleccionadas: [],\n            opcionesTablasSeleccionadas: []\n        }\n        this.loadTables = this.loadTables.bind(this);\n        this.selectTable = this.selectTable.bind(this);\n        this.iniciarCalculo = this.iniciarCalculo.bind(this);\n        this.tablasGuardarCampos = this.tablasGuardarCampos.bind(this);\n        this.verificarGuardarCampos = this.verificarGuardarCampos.bind(this);\n        this.verificarSeleccionoTablas = this.verificarSeleccionoTablas.bind(this);\n        this.creandoArreglos = this.creandoArreglos.bind(this);\n        this.fetchDataComportamientoPago = this.fetchDataComportamientoPago.bind(this);\n        this.getPrestamoTablaComportamientoPago = this.getPrestamoTablaComportamientoPago.bind(this);\n        this.getPrestamoCamposDeTablaComportamientoPago = this.getPrestamoCamposDeTablaComportamientoPago.bind(this);\n        this.getPlanPagoTablaComportamientoPago = this.getPlanPagoTablaComportamientoPago.bind(this);\n        this.getPlanPagoCamposDeTablaComportamientoPago = this.getPlanPagoCamposDeTablaComportamientoPago.bind(this);\n        this.initWebWorkerComportamientoPago = this.initWebWorkerComportamientoPago.bind(this);\n        this.propiedadDeObjetoExisteEnTablaCampos = this.propiedadDeObjetoExisteEnTablaCampos.bind(this);\n        this.verificarProcesosAClasificar = this.verificarProcesosAClasificar.bind(this);\n        this.obtenerTipoCredito = this.obtenerTipoCredito.bind(this);\n        this.obtenerTipoCreditoCampos = this.obtenerTipoCreditoCampos.bind(this);\n        this.fetchDataTipoCredito = this.fetchDataTipoCredito.bind(this);\n        this.fetchDataReglasTipoCreditoCampos = this.fetchDataReglasTipoCreditoCampos.bind(this);\n        this.fetchDataCamposReglasTipoCreditoCampos = this.fetchDataCamposReglasTipoCreditoCampos.bind(this);\n        this.verificarCamposReglasTipoCreditoCampos = this.verificarCamposReglasTipoCreditoCampos.bind(this);\n        this.fetchDataValoresReglasTipoCreditoCampos = this.fetchDataValoresReglasTipoCreditoCampos.bind(this);\n        this.verificarValoresReglasTipoCreditoCampos = this.verificarValoresReglasTipoCreditoCampos.bind(this);\n        this.verifyTypeCreditFinal = this.verifyTypeCreditFinal.bind(this);\n        this.checkFinishMethods = this.checkFinishMethods.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadTables();\n        //myWorker.postMessage([\"comportamientoPago\", sql]);\n        myWorker.onmessage = function (event) {\n            console.log('EN MAIN JS');\n            console.log(event.data);\n        };\n    }\n\n    loadTables() {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Tablas\", (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        for (var i = 0; i < result.recordset.length; i++) {\n                            result.recordset[i].active = false;\n                        };\n                        this.setState({\n                            tablasOrginales: result.recordset\n                        });\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    selectTable(index) {\n        let existeTablaEnConf = false;\n        this.state.tablasOrginales[index].active = !this.state.tablasOrginales[index].active;\n        this.setState({\n            tablasOrginales: this.state.tablasOrginales\n        });\n        for (var i = 0; i < this.state.tablasSeleccionadas.length; i++) {\n            if(this.state.tablasOrginales[index].ID == this.state.tablasSeleccionadas[i].ID) {\n                existeTablaEnConf = true;\n                break;\n            }\n        };\n        if(!existeTablaEnConf) {\n            let tablasSelCopiaTemp = [...this.state.tablasSeleccionadas];\n            tablasSelCopiaTemp.push(this.state.tablasOrginales[index]);\n            this.setState({\n                tablasSeleccionadas: tablasSelCopiaTemp\n            });\n            if(tablasSelCopiaTemp.length == 1) {\n                this.setState({\n                    widthActual: \"100%\"\n                });\n            } else if(tablasSelCopiaTemp.length == 2) {\n                this.setState({\n                    widthActual: \"50%\"\n                });\n            } else {\n                this.setState({\n                    widthActual: \"33%\"\n                });\n            }\n            this.verificarProcesosAClasificar(this.state.tablasOrginales[index].ID);\n        }\n    }\n\n    //metodo para agregar tipo de credito, tipo de cliente, criterios de clasificacion por tabla\n    verificarProcesosAClasificar(index) {\n        //opcionesTablasSeleccionadas\n        //this.obtenerTipoCredito(index);\n    }\n\n    obtenerTipoCredito(index) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from TipoCredito where tablaID = \"+index, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        if(result.recordset.length > 0) {\n                            let tablasSelCopiaTemp = [...this.state.opcionesTablasSeleccionadas];\n                            if(tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1] == undefined)\n                                tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1] = {};\n                            tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1].tipoCreditoNombre = result.recordset[0].nombre;\n                            this.setState({\n                                opcionesTablasSeleccionadas: tablasSelCopiaTemp\n                            });\n                            this.obtenerTipoCreditoCampos(result.recordset[0].ID);\n                        }\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    obtenerTipoCreditoCampos (ID) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from TipoCreditoCampo where tipoCreditoID = \"+ID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        let tablasSelCopiaTemp = [...this.state.opcionesTablasSeleccionadas];\n                        if(tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1] == undefined)\n                            tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1] = {};\n                        tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1].tipoCredito = result.recordset;\n                        this.setState({\n                            opcionesTablasSeleccionadas: tablasSelCopiaTemp\n                        });\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    verificarSeleccionoTablas() {\n        if(this.state.tablasSeleccionadas.length > 0) {\n            this.creandoArreglos();\n        } else {\n            alert(\"Seleccione por lo menos una tabla\");\n        }\n    }\n\n    creandoArreglos() {\n        camposGuardar = [];\n        tamanoFinalBandera = this.state.tablasOrginales.length, tamanoActualBandera = 0;\n        for (var i = 0; i < this.state.tablasOrginales.length; i++) {\n            this.tablasGuardarCampos(this.state.tablasOrginales[i].ID, i);\n        };\n\n        /*for (var i = 0; i < this.state.tablasSeleccionadas.length; i++) {\n            //this.state.tablasSeleccionadas[i]\n            var calcularComportamientoPago = false;\n            var primeraVezEntra = true; //agregar valores de tabla a arreglo global de clientes, prestamos y pagos en ClasificarCartera.js\n            if($(\"#ComportamientoPago\"+i).prop('checked') == true)\n                calcularComportamientoPago = true;\n\n            if(calcularComportamientoPago) {\n                this.fetchDataComportamientoPago(this.state.tablasSeleccionadas[i].ID);\n                if(primeraVezEntra) {\n                    primeraVezEntra = false;\n                }\n            }\n            this.fetchDataTipoCredito(this.state.tablasSeleccionadas[i].ID);\n        };*/\n    }\n\n\n\n    /*      \n        *****   *****   *****       *****   *****   *****   *****\n                        INICIAR ARREGLOS\n        *****   *****   *****       *****   *****   *****   *****\n    */\n\n    tablasGuardarCampos (tablaID, posicionArregloTablasSel) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Tablas where ID = \"+tablaID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        var usuario = result.recordset[0].usuario;\n                        var password = result.recordset[0].contrasena;\n                        var servidor = result.recordset[0].servidor;\n                        var basedatos = result.recordset[0].baseDatos;\n                        var tabla = result.recordset[0].tabla;\n\n                        /*              CONSIGUIENDO VALORES DE TABLA         */\n                        const pool = new sql.ConnectionPool({\n                            user: usuario,\n                            password: password,\n                            server: servidor,\n                            database: basedatos,\n                            stream: true,\n                            connectionTimeout: 900000,\n                            requestTimeout: 900000,\n                            pool: {\n                                max: 40,\n                                min: 0,\n                                idleTimeoutMillis: 30000\n                            },\n                            options: {\n                                useUTC: false\n                            }\n                        });\n                        pool.connect(err => {\n                            pool.request() // or: new sql.Request(pool1)\n                            .query(\"select * from \"+tabla, (err, result) => {\n                                if(result != undefined) {\n                                    this.verificarGuardarCampos(tablaID, result.recordset, posicionArregloTablasSel);\n                                } else {\n                                    //agregar error fallo connecion tabla (no existe o malos campos)\n                                }\n                            });\n                        }); // fin pool connect\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    verificarGuardarCampos (tablaID, valoresTabla, posicionArregloTablasSel) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Campos where tablaID = \"+tablaID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        var identificadorCliente = result.recordset.filter(function( object ) {\n                                                        return object.funcion.localeCompare(\"Identificador\") == 0 && object.tabla.localeCompare(\"Cliente\") == 0;\n                                                    });\n                        var identificadorPrestamo = result.recordset.filter(function( object ) {\n                                                        return object.funcion.localeCompare(\"Identificador\") == 0 && object.tabla.localeCompare(\"Préstamo\") == 0;\n                                                    });\n                        var camposAGuardarCliente = result.recordset.filter(function( object ) {\n                                                        return object.tabla.localeCompare(\"Cliente\") == 0;\n                                                    });\n                        var camposAGuardarPrestamo = result.recordset.filter(function( object ) {\n                                                        return object.tabla.localeCompare(\"Préstamo\") == 0;\n                                                    });\n                        arregloCamposTablasSeleccionadas.splice(posicionArregloTablasSel, 0, result.recordset);\n                        if(identificadorCliente.length == 0 && identificadorPrestamo.length == 0) {\n                            alert(\"Tiene que ingresar un campo Identificador para Cliente o para Préstamo\");\n                        } else {\n                            //viendo si se llama metodo crear arreglo para clientes y prestamos o solo uno\n                            tamanoActualBandera++;\n                            if(identificadorCliente.length > 0 && identificadorPrestamo.length > 0) {\n                                //myWorker.postMessage([\"iniciarArregloClientes\", valoresTabla, identificadorCliente[0].nombre, identificadorCliente[0].tipo, camposAGuardarCliente, false]);\n                                //myWorker.postMessage([\"iniciarArregloPrestamos\", valoresTabla, identificadorCliente[0].nombre, identificadorPrestamo[0].nombre, identificadorCliente[0].tipo, identificadorPrestamo[0].tipo, camposAGuardarPrestamo, true]);\n                                constructor([\"iniciarArregloClientes\", valoresTabla, identificadorCliente[0].nombre, identificadorCliente[0].tipo, camposAGuardarCliente, false]);\n                                constructor([\"iniciarArregloPrestamos\", valoresTabla, identificadorCliente[0].nombre, identificadorPrestamo[0].nombre, identificadorCliente[0].tipo, identificadorPrestamo[0].tipo, camposAGuardarPrestamo, true]);\n                                camposGuardar.concat(result.recordset);\n                                this.iniciarCalculo(true, true, true, true);\n                                let self = this;\n                                myWorker.onmessage = function(e) {\n                                    if(e.data == 'terminoCrearArreglos') {\n                                        //revisando que procedimientos llamar\n                                        self.iniciarCalculo(true, true, true, true);\n                                    }\n                                }\n                            } else {\n                                if(identificadorCliente.length > 0) {\n                                    //myWorker.postMessage([\"iniciarArregloClientes\", valoresTabla, identificadorCliente[0].nombre, identificadorCliente[0].tipo, camposAGuardarCliente, true]);\n                                    constructor([\"iniciarArregloClientes\", valoresTabla, identificadorCliente[0].nombre, identificadorCliente[0].tipo, camposAGuardarCliente, true]);\n                                    let self = this;\n                                    camposGuardar.concat(result.recordset);\n                                    this.iniciarCalculo(false, false, true, false);\n                                    myWorker.onmessage = function(e) {\n                                        console.log(\"llamado de vuelta\");\n                                        console.log(e);\n                                        if(e.data == 'terminoCrearArreglos') {\n                                            //revisando que procedimientos llamar\n                                            self.iniciarCalculo(false, false, true, false);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    iniciarCalculo (verificarComportamientoPago, verificarTipoCredito, verificarTipoCliente, verificarClasCategoria) {\n        //como no tiene id prestamo o cliente, no se puede calcular comportamiento plan pago, agregar mensaje bitacora  // si verificarComportamientoPago == false\n        if( tamanoActualBandera == tamanoFinalBandera ) {\n            banderaGuardarResultadosTamActual = 0;\n            banderaGuardarResultadosTamFinal = 0;\n            for (var i = 0; i < this.state.tablasOrginales.length; i++) {\n                var calcularComportamientoPago = false;\n                var primeraVezEntra = true; //agregar valores de tabla a arreglo global de clientes, prestamos y pagos en ClasificarCartera.js\n\n                //como no tiene id prestamo o cliente, no se puede calcular comportamiento plan pago, agregar mensaje bitacora  // si verificarComportamientoPago == false\n\n                /*if(verificarComportamientoPago && $(\"#ComportamientoPago\"+i).prop('checked') == true)\n                    calcularComportamientoPago = true;*/\n\n                //if(calcularComportamientoPago) {\n                    this.fetchDataComportamientoPago(this.state.tablasOrginales[i].ID);\n                    //banderaGuardarResultadosTamFinal++;\n                    /*if(primeraVezEntra) {\n                        primeraVezEntra = false;\n                    }\n                }\n                if(verificarTipoCredito) {*/\n                    //this.fetchDataTipoCredito(this.state.tablasOrginales[i].ID);\n                    banderaGuardarResultadosTamFinal++;\n                //}\n            };\n        }\n    }\n\n    /*      \n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n                        INICIAR ARREGLOS\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n    */\n\n\n\n\n\n\n    /*      \n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n                        COMPORTAMIENTO PAGO\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n    */\n\n    fetchDataComportamientoPago (prestamoTablaID) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from ComportamientoPago where prestamoTablaID = \"+prestamoTablaID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        banderaGuardarResultadosTamActual++;\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        for (var i = 0; i < result.recordset.length; i++) {\n                            this.getPrestamoTablaComportamientoPago(result.recordset[i]);\n                        }\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    getPrestamoTablaComportamientoPago(ComportamientoPago) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Tablas where ID = \"+ComportamientoPago.prestamoTablaID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        banderaGuardarResultadosTamActual++;\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        this.getPrestamoCamposDeTablaComportamientoPago(result.recordset[0], ComportamientoPago);\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    getPrestamoCamposDeTablaComportamientoPago(tabla, ComportamientoPago) {\n        let self = this;\n        this.getFieldsFromCamposTable(tabla, ComportamientoPago, \"prestamos\", function(camposDePrestamoTabla, valoresDeTablaPrestamo, ComportamientoPago) {\n            self.getPlanPagoTablaComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, ComportamientoPago);\n        });\n    }\n\n    getPlanPagoTablaComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, ComportamientoPago) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Tablas where ID = \"+ComportamientoPago.planPagoTablaID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        banderaGuardarResultadosTamActual++;\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        this.getPlanPagosCamposDeTablaComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, result.recordset[0], ComportamientoPago);\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    getPlanPagosCamposDeTablaComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, tabla, ComportamientoPago) {\n        let self = this;\n        this.getFieldsFromCamposTable(tabla, ComportamientoPago, \"planpagos\", function(camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, ComportamientoPago) {\n            self.initWebWorkerComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, ComportamientoPago);\n        }, camposDePrestamoTabla, valoresDeTablaPrestamo);\n    }\n\n    getPlanPagoCamposDeTablaComportamientoPago(prestamoTabla, camposDePrestamoTabla, tabla, ComportamientoPago) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Campos where tablaID = \"+tabla.ID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        banderaGuardarResultadosTamActual++;\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n\n                        /*              CONSIGUIENDO VALORES DE TABLA DE PLAN DE PAGOS         */\n                        const pool = new sql.ConnectionPool({\n                            user: tabla.usuario,\n                            password: tabla.contrasena,\n                            server: tabla.servidor,\n                            database: tabla.baseDatos,\n                            stream: true,\n                            connectionTimeout: 900000,\n                            requestTimeout: 900000,\n                            pool: {\n                                max: 40,\n                                min: 0,\n                                idleTimeoutMillis: 30000\n                            },\n                            options: {\n                                useUTC: false\n                            }\n                        });\n                        pool.connect(err => {\n                            pool.request() // or: new sql.Request(pool1)\n                            .query(\"select * from \"+tabla.tabla, (err, result) => {\n                                this.getFieldsComportamientoPago(prestamoTabla, camposDePrestamoTabla, result.recordset, ComportamientoPago);\n                            });\n                        }); // fin pool connect\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    getFieldsComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, ComportamientoPago) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Campos where ID = \"+ComportamientoPago.idClientePrestamoCampoID+\" or ID = \"+ComportamientoPago.idClientePlanPagoCampoID+\" or ID = \"+ComportamientoPago.numeroPrestamoCampoID+\" or ID = \"+ComportamientoPago.numeroPlanPagoCampoID+\" or ID = \"+ComportamientoPago.pagoCapitalPrestamoCampoID+\" or ID = \"+ComportamientoPago.pagoCapitalPlanPagoCampoID+\" or ID = \"+ComportamientoPago.pagoImpuestosPrestamoCampoID+\" or ID = \"+ComportamientoPago.pagoImpuestosPlanPagoCampoID+\" or ID = \"+ComportamientoPago.fechaPrestamoCampoID+\" or ID = \"+ComportamientoPago.fechaPlanPagoCampoID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        banderaGuardarResultadosTamActual++;\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        this.initWebWorkerComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, result.recordset, ComportamientoPago);\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    initWebWorkerComportamientoPago (camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, ComportamientoPago) {\n        //myWorker.postMessage([\"comportamientoPago\", camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, ComportamientoPago]);\n        console.log('AHHHHHH')\n        constructor([\"comportamientoPago\", camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, ComportamientoPago]);\n        banderaGuardarResultadosTamActual++;\n        this.checkFinishMethods();\n    }\n\n    getFieldsFromCamposTable (tabla, ComportamientoPago, banderaMetodoLlamado, callbackParam, camposDePrestamoTabla, valoresDeTablaPrestamo) {\n        let self = this;\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Campos where tablaID = \"+tabla.ID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        banderaGuardarResultadosTamActual++;\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n\n                        /*              UTILIZAR UN \"WEBPACK\" Y HACER WEB WORKER PARA GUARDAR O TRAER COSAS (sql en web worker)        */\n\n                        /*              CONSIGUIENDO VALORES DE TABLA DE PRESTAMOS         */\n                        const pool = new sql.ConnectionPool({\n                            user: tabla.usuario,\n                            password: tabla.contrasena,\n                            server: tabla.servidor,\n                            database: tabla.baseDatos,\n                            stream: true,\n                            connectionTimeout: 900000,\n                            requestTimeout: 900000,\n                            pool: {\n                                max: 40,\n                                min: 0,\n                                idleTimeoutMillis: 30000\n                            },\n                            options: {\n                                useUTC: false\n                            }\n                        });\n                        console.log('pool');\n                        console.log(pool);\n                        console.log('tabla');\n                        console.log(tabla);\n                        let camposTabla = result.recordset;\n                        console.log('camposTabla');\n                        console.log(camposTabla);\n                        pool.connect(err => {\n                            pool.request() // or: new sql.Request(pool1)\n                            .query(\"select * from \"+tabla.tabla, (err, result) => {\n                                console.log(result);\n                                console.log(err);\n                                /*var nuevoArregloTrans = [];\n                                for (var i = 0; i < result.recordset.length; i++) {\n                                    console.log(result.recordset[i]);\n                                    console.log(result.recordset[i].length);\n                                    for (var k = 0; k < result.recordset[i].length; k++) {\n                                        console.log(result.recordset[i][k]);\n                                        for (var j = 0; j < camposTabla.length; j++) {\n                                            if(j==0) {\n                                                nuevoArregloTrans.push({});\n                                                console.log(result.recordset[i]);\n                                                console.log(result.recordset[i][k]);\n                                                nuevoArregloTrans[i].camposTabla[j].nombre = result.recordset[i][k][camposTabla[j].nombre]\n                                            } else\n                                                nuevoArregloTrans[i].camposTabla[j].nombre = result.recordset[i][k][camposTabla[j].nombre]\n                                        };\n                                    }\n                                };*/\n                                for (var i = 0; i < result.recordset.length; i++) {\n                                    Object.keys(result.recordset[i]).forEach(function(key,index) {\n                                        // key: the name of the object key\n                                        // index: the ordinal position of the key within the object\n                                        if(!self.propiedadDeObjetoExisteEnTablaCampos(camposTabla, key)) {\n                                            delete result.recordset[i][key];\n                                        }\n                                    });\n                                }\n                                console.log(\"result.recordset\");\n                                console.log(result.recordset);\n                                //result.recordset = nuevoArregloTrans;\n                                if(banderaMetodoLlamado == 'prestamos')\n                                    callbackParam(camposTabla, result.recordset, ComportamientoPago);\n                                else\n                                    callbackParam(camposDePrestamoTabla, valoresDeTablaPrestamo, camposTabla, result.recordset, ComportamientoPago);\n                                //callbackParam(result.recordset, ComportamientoPago);\n                                //eval(\"this.\"+callbackParam+\"(\"+result.recordset+\", \"+camposTabla+\", \"+ComportamientoPago+\");\");\n                            });\n                        }); // fin pool connect\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    propiedadDeObjetoExisteEnTablaCampos(camposTabla, key) {\n        for (var i = 0; i < camposTabla.length; i++) {\n            if (camposTabla[i].nombre.localeCompare(key) == 0) {\n                return true;\n            }\n        };\n        return false;\n    }\n\n\n    hacerChekeosDeVariablesAlImportar () {\n        /*\n\n            EN RESULT DE CAMPOS DESPUES DE TRAER POR TABLA ID\n\n            if(result.recordset[i].tipo.localeCompare(\"bit\") == 0 || result.recordset[i].tipo.localeCompare(\"date\") == 0 || result.recordset[i].tipo.localeCompare(\"varchar\") == 0) {\n                if(result.recordset[i].tipo.localeCompare(\"bit\") == 0 || result.recordset[i].tipo.localeCompare(\"varchar\") == 0) {\n                    if(selectFieldsQueryString.length > 0)\n                        selectFieldsQueryString+=\", \";\n                    selectFieldsQueryString+=result.recordset[i].nombre;\n                } else if(result.recordset[i].tipo.localeCompare(\"date\") == 0) {\n                    if(selectFieldsQueryString.length > 0)\n                        selectFieldsQueryString+=\", \";\n                    selectFieldsQueryString+=result.recordset[i].nombre;\n                }\n            } else if(result.recordset[i].tipo.localeCompare(\"int\") == 0) {\n                if(selectFieldsQueryString.length > 0)\n                    selectFieldsQueryString+=\", \";\n                selectFieldsQueryString+=result.recordset[i].nombre;\n            }\n        */\n    }\n\n    /*  \n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****    \n        *****   *****   *****       *****   *****   *****   *****\n                        COMPORTAMIENTO PAGO\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n    */\n\n\n\n\n\n\n\n\n\n    /*      \n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n                        TIPO DE CREDITOS\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n    */\n\n    fetchDataTipoCredito () {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from TipoCredito\", (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        banderaGuardarResultadosTamActual++;\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        //arregloCamposTipoCreditos: Cada posicion del arreglo corresponde a la del tipo de credito\n                        var arregloReglasTipoCreditos = [];\n                        tamanoFinalBandera = result.recordset.length, tamanoActualBandera = 0;\n                        for (var i = 0; i < result.recordset.length; i++) {\n                            this.fetchDataReglasTipoCreditoCampos(result.recordset[i], arregloReglasTipoCreditos, i, result.recordset);\n                        }\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    fetchDataReglasTipoCreditoCampos (tipoCredito, arregloReglasTipoCreditos, i, arregloTipoCreditos) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Reglas where tipoTablaRes = 'TipoCredito' and idTipoTabla=\"+tipoCredito.ID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        banderaGuardarResultadosTamActual++;\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        tamanoActualBandera++;\n                        arregloReglasTipoCreditos[i] = result.recordset;\n                        this.verificarCamposReglasTipoCreditoCampos(arregloTipoCreditos, arregloReglasTipoCreditos);\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    verificarCamposReglasTipoCreditoCampos (arregloTipoCreditos, arregloReglasTipoCreditos) {\n        if(tamanoActualBandera == tamanoFinalBandera) {\n            tamanoActualBandera = 0, tamanoFinalBandera = 0;\n            for (var i = 0; i < arregloReglasTipoCreditos.length; i++) {\n                for (var j = 0; j < arregloReglasTipoCreditos[i].length; j++) {\n                    tamanoFinalBandera++;\n                };\n            };\n            for (var i = 0; i < arregloReglasTipoCreditos.length; i++) {\n                for (var j = 0; j < arregloReglasTipoCreditos[i].length; j++) {\n                    this.fetchDataCamposReglasTipoCreditoCampos(arregloReglasTipoCreditos[i][j], arregloReglasTipoCreditos, i, j, arregloTipoCreditos);\n                };\n            };\n        }\n    }\n\n    fetchDataCamposReglasTipoCreditoCampos (regla, arregloReglasTipoCreditos, i, j, arregloTipoCreditos) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Campos where ID = \"+regla.campoCampoID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        banderaGuardarResultadosTamActual++;\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        tamanoActualBandera++;\n                        arregloReglasTipoCreditos[i][j].campoValor = result.recordset[0];\n                        this.verificarValoresReglasTipoCreditoCampos(arregloTipoCreditos, arregloReglasTipoCreditos);\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    verificarValoresReglasTipoCreditoCampos (arregloTipoCreditos, arregloReglasTipoCreditos) {\n        if(tamanoActualBandera == tamanoFinalBandera) {\n            tamanoActualBandera = 0, tamanoFinalBandera = 0;\n            for (var i = 0; i < arregloReglasTipoCreditos.length; i++) {\n                for (var j = 0; j < arregloReglasTipoCreditos[i].length; j++) {\n                    var idsValores = arregloReglasTipoCreditos[i][j].valor.split(\",\");\n                    for (var k = 0; k < idsValores.length; k++) {\n                        tamanoFinalBandera++;\n                    };\n                };\n            };\n            for (var i = 0; i < arregloReglasTipoCreditos.length; i++) {\n                for (var j = 0; j < arregloReglasTipoCreditos[i].length; j++) {\n                    var idsValores = arregloReglasTipoCreditos[i][j].valor.split(\",\");\n                    for (var k = 0; k < idsValores.length; k++) {\n                        this.fetchDataValoresReglasTipoCreditoCampos(idsValores[k], arregloReglasTipoCreditos[i][j].esListaValor, arregloReglasTipoCreditos, i, j, arregloTipoCreditos);\n                    };\n                };\n            };\n        }\n    }\n\n    fetchDataValoresReglasTipoCreditoCampos (id, esLista, arregloReglasTipoCreditos, i, j, arregloTipoCreditos) {\n        var tabla;\n        if(esLista)\n            tabla = 'VariablesdeLista';\n        else\n            tabla = 'Campos';\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from \"+tabla+\" where ID = \"+id, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        banderaGuardarResultadosTamActual++;\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        tamanoActualBandera++;\n                        if(arregloReglasTipoCreditos[i][j].valorValores == undefined)\n                            arregloReglasTipoCreditos[i][j].valorValores = [];\n                        arregloReglasTipoCreditos[i][j].valorValores.push(result.recordset[0]);\n                        this.verifyTypeCreditFinal(arregloTipoCreditos, arregloReglasTipoCreditos)\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    verifyTypeCreditFinal (arregloTipoCreditos, arregloReglasTipoCreditos) {\n        if(tamanoActualBandera == tamanoFinalBandera) {\n            console.log(arregloTipoCreditos);\n            console.log(arregloReglasTipoCreditos);\n            //myWorker.postMessage([\"tiposCredito\", arregloTipoCreditos, arregloReglasTipoCreditos]);\n            constructor([\"tiposCredito\", arregloTipoCreditos, arregloReglasTipoCreditos]);\n            banderaGuardarResultadosTamActual++;\n            this.checkFinishMethods();\n        }\n    }\n\n    /* \n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****     \n        *****   *****   *****       *****   *****   *****   *****\n                        TIPO DE CREDITOS\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n        *****   *****   *****       *****   *****   *****   *****\n    */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    /*      \n        *****   *****   *****       *****   *****   *****   *****\n                        GUARDAR RESULTADOS\n        *****   *****   *****       *****   *****   *****   *****\n    */\n\n    checkFinishMethods() {\n        console.log(\"banderaGuardarResultadosTamActual = \"+banderaGuardarResultadosTamActual);\n        console.log(\"banderaGuardarResultadosTamFinal = \"+banderaGuardarResultadosTamFinal);\n        if( banderaGuardarResultadosTamActual == banderaGuardarResultadosTamFinal ) {\n            console.log(\"FIN DE CALCULOS\");\n            console.log(\"GUARDANDO CAMPOS\");\n            for (var i = 0; i < arregloCamposTablasSeleccionadas.length; i++) {\n                console.log(arregloCamposTablasSeleccionadas[i]);\n            };\n        }\n    }\n\n    iterateProperties (arreglo) {\n        for (var i = 0; i < arreglo.length; i++) {\n            var identificadorCampoNombre;\n            Object.keys(arreglo[i]).forEach(function(key,index) {\n                // key: the name of the object key\n                // index: the ordinal position of the key within the object\n                identificadorCampoNombre = camposGuardar.filter(function( object ) {\n                                return object.nombre.localeCompare(key) == 0 && object.funcion.localeCompare(\"Identificador\") == 0;\n                            });\n            });\n            if(identificadorCampoNombre.length > 0) {\n                Object.keys(arreglo[i]).forEach(function(key,index) {\n                    // key: the name of the object key\n                    // index: the ordinal position of the key within the object\n                    console.log(\"key\");\n                    console.log(key);\n                    console.log(\"arreglo[i]\");\n                    console.log(arreglo[i]);\n                    console.log(\"arreglo[i][key]\");\n                    console.log(arreglo[i][key]);\n                    if(identificadorCampoNombre[0].funcion.localeCompare(\"Identificador\") == 0) {\n                        this.verifyResultID(identificadorCampoNombre[0].nombre, identificadorCampoNombre[0].tabla, key);\n                    } else {\n                        this.verifyResultField(identificadorCampoNombre[0].nombre, identificadorCampoNombre[0].tabla, key, arreglo[i][key]);\n                    }\n                });\n            } else {\n                //bitacora no existe campo id\n            }\n        };\n    }\n\n    verifyResultID(valor, objeto, nombre) {\n        console.log(prop);\n        this.saveResultID(valor, objeto, nombre);\n    }\n\n    verifyResultField(idObjeto, objeto, nombre, valor) {\n        if(!isNaN(valor)) {\n            saveResultFieldInt(idObjeto, objeto, nombre, valor);\n        } else {\n            saveResultFieldString(idObjeto, objeto, nombre, valor);\n        }\n    }\n\n    saveResultID (valor, objetoV, nombreV) {\n        var identificador = valor;\n        var objeto = objetoV;\n        var nombre = nombreV;\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"insert into ResultadosID values (identificador, objeto, nombre)\", (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    saveResultFieldInt (idObjetoV, objetoV, nombreV, valorV) {\n        var identificador = idObjetoV;\n        var objeto = objetoV;\n        var nombre = nombreV;\n        var fecha = new Date();\n        var valor = valorV;\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"insert into ResultadosInt values ('\"+idObjeto+\"', '\"+objeto+\"', '\"+nombre+\"', '\"+this.formatDateCreation(fecha)+\"', \"+valor+\")\", (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    saveResultFieldString (idObjetoV, objetoV, nombreV, valorV) {\n        var identificador = idObjetoV;\n        var objeto = objetoV;\n        var nombre = nombreV;\n        var fecha = new Date();\n        var valor = valorV;\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"insert into ResultadosString values ('\"+idObjeto+\"', '\"+objeto+\"', '\"+nombre+\"', '\"+this.formatDateCreation(fecha)+\"', '\"+valor+\"')\", (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    formatDateCreation(date) {\n        //formato si es STRING\n        //aaaa/mm/dd\n        //aaaa-mm-dd\n        var monthNames = [\n            \"Ene\", \"Feb\", \"Mar\",\n            \"Abr\", \"May\", \"Jun\", \"Jul\",\n            \"Ago\", \"Sep\", \"Oct\",\n            \"Nov\", \"Dec\"\n        ];\n\n        var day = date.getDate();\n        var monthIndex = date.getMonth();\n        monthIndex++;\n        var year = date.getFullYear();\n        return year + '-' + monthIndex + '-' + day;\n    }\n\n    render() {\n        return (\n            <div style={{height: \"85vh\", width: \"100%\"}}>\n                <div style={{width: \"100%\", height: \"7%\"}}>\n                    <div style={{display: \"flex\", alignItems: \"center\", justifyContent: \"center\", width: \"100%\", height: \"100%\"}}>\n                        <h2>Seleccione Tablas a Clasificar</h2>\n                    </div>\n                </div>\n                <div style={{width: \"100%\", height: \"11%\"}}>\n                    <SeleccionarTablaClasificarCarteraProceso tablasOrginales={this.state.tablasOrginales} tablasSeleccionadas={this.state.tablasSeleccionadas} selectTable={this.selectTable}> </SeleccionarTablaClasificarCarteraProceso>\n                </div>\n                <div style={{width: \"100%\", height: \"76%\"}}>\n                    <div style={{height: \"100%\", overflowX: \"scroll\", overflowY: \"hidden\", whiteSpace: \"nowrap\", borderRadius: \"5px\", padding: \"1% 0%\", border: \"solid 3px #cfd8dc\", borderRadius: \"5px\", marginTop: \"2%\"}}>\n                        <div style={{height: \"100%\", width: \"100%\", display: \"inline-block\", position: \"relative\"}}>\n                            <div style={{height: \"95%\", width: \"95%\", backgroundColor: \"white\", position: \"absolute\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\", borderRadius: \"5px\", overflowY: \"scroll\"}}>\n                                <div className={\"text-center\"} style={{borderBottom: \"solid 4px #cfd8dc\"}}>\n                                    <h3>Criterios de Clasificaci&oacute;n</h3>\n                                </div>\n                                <div style={{width: \"100%\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", borderBottom: \"solid 3px #eceff1\"}}>\n                                    <div style={{width: \"90%\", height: \"60%\", textAlign: \"center\", display: \"table\"}}>\n                                        <h5 style={{display: \"table-cell\", verticalAlign: \"middle\"}}>Capacidad de Pago</h5>\n                                    </div>\n                                </div>\n                                <div style={{width: \"100%\", height: \"25%\"}}>\n                                </div>\n                                <div style={{width: \"100%\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", border: \"solid 3px #eceff1\"}}>\n                                    <div style={{width: \"90%\", height: \"60%\", textAlign: \"center\", display: \"table\"}}>\n                                        <h5 style={{display: \"table-cell\", verticalAlign: \"middle\"}}>Comportamiento de Pago</h5>\n                                    </div>\n                                </div>\n                                <div style={{width: \"100%\", height: \"25%\", overflowY: \"scroll\"}}>\n                                </div>\n\n                                <div className={\"text-center\"} style={{borderBottom: \"solid 4px #cfd8dc\", borderTop: \"solid 4px #cfd8dc\"}}>\n                                    <h3>Tipo de Cr&eacute;dito</h3>\n                                </div>\n                                <div style={{width: \"100%\", height: \"25%\", overflowY: \"scroll\"}}>\n                                </div>\n\n                                <div className={\"text-center\"} style={{borderBottom: \"solid 4px #cfd8dc\", borderTop: \"solid 4px #cfd8dc\"}}>\n                                    <h3>Categorias de Clasificaci&oacute;n</h3>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div style={{width: \"100%\", height: \"6%\", padding: \"1% 0%\"}} className={\"text-center\"}>\n                    <a onClick={this.verificarSeleccionoTablas} className={\"btn btn-primary col-xs-6 col-6\"} style={{color: \"white\", fontSize: \"1.2em\", fontWeight: \"bold\"}}>Iniciar </a>\n                </div>\n            </div>\n        );\n    }\n}\n"],"file":"ClasificarCarteraProceso.js"}