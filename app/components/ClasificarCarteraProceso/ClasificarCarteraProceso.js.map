{"version":3,"sources":["components/ClasificarCarteraProceso/ClasificarCarteraProceso.js"],"names":["myWorker","Worker","ClasificarCarteraProceso","props","state","widthActual","tablasOrginales","tablasSeleccionadas","opcionesTablasSeleccionadas","loadTables","bind","selectTable","iniciarCalculo","verificarSeleccionoTablas","fetchDataComportamientoPago","getPrestamoTablaComportamientoPago","getPrestamoCamposDeTablaComportamientoPago","getPlanPagoTablaComportamientoPago","getPlanPagoCamposDeTablaComportamientoPago","initWebWorkerComportamientoPago","propiedadDeObjetoExisteEnTablaCampos","agregarOpciones","obtenerTipoCredito","obtenerTipoCreditoCampos","onmessage","event","console","log","data","transaction","sql","Transaction","pool","begin","err","rolledBack","on","aborted","request","Request","query","result","rollback","commit","setState","recordset","index","existeTablaEnConf","i","length","ID","tablasSelCopiaTemp","push","undefined","tipoCreditoNombre","nombre","tipoCredito","alert","calcularComportamientoPago","primeraVezEntra","$","prop","prestamoTablaID","ComportamientoPago","tabla","self","getFieldsFromCamposTable","camposDePrestamoTabla","valoresDeTablaPrestamo","planPagoTablaID","getPlanPagosCamposDeTablaComportamientoPago","camposDePlanPagoTabla","valoresDeTablaPlanPago","prestamoTabla","ConnectionPool","user","password","contrasena","server","servidor","database","baseDatos","stream","connectionTimeout","requestTimeout","max","min","idleTimeoutMillis","options","useUTC","connect","getFieldsComportamientoPago","idClientePrestamoCampoID","idClientePlanPagoCampoID","numeroPrestamoCampoID","numeroPlanPagoCampoID","pagoCapitalPrestamoCampoID","pagoCapitalPlanPagoCampoID","pagoImpuestosPrestamoCampoID","pagoImpuestosPlanPagoCampoID","fechaPrestamoCampoID","fechaPlanPagoCampoID","postMessage","banderaMetodoLlamado","callbackParam","usuario","camposTabla","Object","keys","forEach","key","localeCompare","height","width","display","alignItems","justifyContent","padding","color","fontSize","fontWeight","React","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport sql from 'mssql';\n\nimport SeleccionarTablaClasificarCarteraProceso from './SeleccionarTablaClasificarCarteraProceso.js';\nimport ConfiguracionTablasClasificar from './ConfiguracionTablasClasificar.js';\n\nconst myWorker = new Worker(\"./components/ClasificarCredito.js\");\n\nexport default class ClasificarCarteraProceso extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            widthActual: \"33%\",\n            tablasOrginales: [],\n            tablasSeleccionadas: [],\n            opcionesTablasSeleccionadas: []\n        }\n        this.loadTables = this.loadTables.bind(this);\n        this.selectTable = this.selectTable.bind(this);\n        this.iniciarCalculo = this.iniciarCalculo.bind(this);\n        this.verificarSeleccionoTablas = this.verificarSeleccionoTablas.bind(this);\n        this.fetchDataComportamientoPago = this.fetchDataComportamientoPago.bind(this);\n        this.getPrestamoTablaComportamientoPago = this.getPrestamoTablaComportamientoPago.bind(this);\n        this.getPrestamoCamposDeTablaComportamientoPago = this.getPrestamoCamposDeTablaComportamientoPago.bind(this);\n        this.getPlanPagoTablaComportamientoPago = this.getPlanPagoTablaComportamientoPago.bind(this);\n        this.getPlanPagoCamposDeTablaComportamientoPago = this.getPlanPagoCamposDeTablaComportamientoPago.bind(this);\n        this.initWebWorkerComportamientoPago = this.initWebWorkerComportamientoPago.bind(this);\n        this.propiedadDeObjetoExisteEnTablaCampos = this.propiedadDeObjetoExisteEnTablaCampos.bind(this);\n        this.agregarOpciones = this.agregarOpciones.bind(this);\n        this.obtenerTipoCredito = this.obtenerTipoCredito.bind(this);\n        this.obtenerTipoCreditoCampos = this.obtenerTipoCreditoCampos.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadTables();\n        //myWorker.postMessage([\"comportamientoPago\", sql]);\n        myWorker.onmessage = function (event) {\n            console.log('EN MAIN JS');\n            console.log(event.data);\n        };\n    }\n\n    loadTables() {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Tablas\", (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        this.setState({\n                            tablasOrginales: result.recordset\n                        });\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    selectTable(index) {\n        let existeTablaEnConf = false;\n        for (var i = 0; i < this.state.tablasSeleccionadas.length; i++) {\n            if(this.state.tablasOrginales[index].ID == this.state.tablasSeleccionadas[i].ID) {\n                existeTablaEnConf = true;\n                break;\n            }\n        };\n        if(!existeTablaEnConf) {\n            let tablasSelCopiaTemp = [...this.state.tablasSeleccionadas];\n            tablasSelCopiaTemp.push(this.state.tablasOrginales[index]);\n            this.setState({\n                tablasSeleccionadas: tablasSelCopiaTemp\n            });\n            if(tablasSelCopiaTemp.length == 1) {\n                this.setState({\n                    widthActual: \"100%\"\n                });\n            } else if(tablasSelCopiaTemp.length == 2) {\n                this.setState({\n                    widthActual: \"50%\"\n                });\n            } else {\n                this.setState({\n                    widthActual: \"33%\"\n                });\n            }\n            this.agregarOpciones(this.state.tablasOrginales[index].ID);\n        }\n    }\n\n    //metodo para agregar tipo de credito, tipo de cliente, criterios de clasificacion por tabla\n    agregarOpciones(index) {\n        //opcionesTablasSeleccionadas\n        this.obtenerTipoCredito(index);\n    }\n\n    obtenerTipoCredito(index) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from TipoCredito where tablaID = \"+index, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        let tablasSelCopiaTemp = [...this.state.opcionesTablasSeleccionadas];\n                        if(tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1] == undefined)\n                            tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1] = {};\n                        tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1].tipoCreditoNombre = result.recordset[0].nombre;\n                        this.setState({\n                            opcionesTablasSeleccionadas: tablasSelCopiaTemp\n                        });\n                        this.obtenerTipoCreditoCampos(result.recordset[0].ID);\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    obtenerTipoCreditoCampos (ID) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from TipoCreditoCampo where tipoCreditoID = \"+ID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        let tablasSelCopiaTemp = [...this.state.opcionesTablasSeleccionadas];\n                        if(tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1] == undefined)\n                            tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1] = {};\n                        tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1].tipoCredito = result.recordset;\n                        this.setState({\n                            opcionesTablasSeleccionadas: tablasSelCopiaTemp\n                        });\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    verificarSeleccionoTablas() {\n        if(this.state.tablasSeleccionadas.length > 0) {\n            this.iniciarCalculo();\n        } else {\n            alert(\"Seleccione por lo menos una tabla\");\n        }\n    }\n\n    iniciarCalculo() {\n        for (var i = 0; i < this.state.tablasSeleccionadas.length; i++) {\n            //this.state.tablasSeleccionadas[i]\n            var calcularComportamientoPago = false;\n            var primeraVezEntra = true; //agregar valores de tabla a arreglo global de clientes, prestamos y pagos en ClasificarCartera.js\n            if($(\"#ComportamientoPago\"+i).prop('checked') == true)\n                calcularComportamientoPago = true;\n\n            if(calcularComportamientoPago) {\n                this.fetchDataComportamientoPago(this.state.tablasSeleccionadas[i].ID);\n                if(primeraVezEntra) {\n                    primeraVezEntra = false;\n                }\n            }\n        };\n    }\n\n    fetchDataComportamientoPago (prestamoTablaID) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from ComportamientoPago where prestamoTablaID = \"+prestamoTablaID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        for (var i = 0; i < result.recordset.length; i++) {\n                            this.getPrestamoTablaComportamientoPago(result.recordset[i]);\n                        }\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    getPrestamoTablaComportamientoPago(ComportamientoPago) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Tablas where ID = \"+ComportamientoPago.prestamoTablaID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        this.getPrestamoCamposDeTablaComportamientoPago(result.recordset[0], ComportamientoPago);\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    getPrestamoCamposDeTablaComportamientoPago(tabla, ComportamientoPago) {\n        let self = this;\n        this.getFieldsFromCamposTable(tabla, ComportamientoPago, \"prestamos\", function(camposDePrestamoTabla, valoresDeTablaPrestamo, ComportamientoPago) {\n            self.getPlanPagoTablaComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, ComportamientoPago);\n        });\n    }\n\n    getPlanPagoTablaComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, ComportamientoPago) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Tablas where ID = \"+ComportamientoPago.planPagoTablaID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        this.getPlanPagosCamposDeTablaComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, result.recordset[0], ComportamientoPago);\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    getPlanPagosCamposDeTablaComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, tabla, ComportamientoPago) {\n        let self = this;\n        this.getFieldsFromCamposTable(tabla, ComportamientoPago, \"planpagos\", function(camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, ComportamientoPago) {\n            self.initWebWorkerComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, ComportamientoPago);\n        }, camposDePrestamoTabla, valoresDeTablaPrestamo);\n    }\n\n    getPlanPagoCamposDeTablaComportamientoPago(prestamoTabla, camposDePrestamoTabla, tabla, ComportamientoPago) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Campos where tablaID = \"+tabla.ID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n\n                        /*              CONSIGUIENDO VALORES DE TABLA DE PLAN DE PAGOS         */\n                        const pool = new sql.ConnectionPool({\n                            user: tabla.nombre,\n                            password: tabla.contrasena,\n                            server: tabla.servidor,\n                            database: tabla.baseDatos,\n                            stream: true,\n                            connectionTimeout: 900000,\n                            requestTimeout: 900000,\n                            pool: {\n                                max: 40,\n                                min: 0,\n                                idleTimeoutMillis: 30000\n                            },\n                            options: {\n                                useUTC: false\n                            }\n                        });\n                        pool.connect(err => {\n                            pool.request() // or: new sql.Request(pool1)\n                            .query(\"select * from \"+tabla.tabla, (err, result) => {\n                                this.getFieldsComportamientoPago(prestamoTabla, camposDePrestamoTabla, result.recordset, ComportamientoPago);\n                            });\n                        }); // fin pool connect\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    getFieldsComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, ComportamientoPago) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Campos where ID = \"+ComportamientoPago.idClientePrestamoCampoID+\" or ID = \"+ComportamientoPago.idClientePlanPagoCampoID+\" or ID = \"+ComportamientoPago.numeroPrestamoCampoID+\" or ID = \"+ComportamientoPago.numeroPlanPagoCampoID+\" or ID = \"+ComportamientoPago.pagoCapitalPrestamoCampoID+\" or ID = \"+ComportamientoPago.pagoCapitalPlanPagoCampoID+\" or ID = \"+ComportamientoPago.pagoImpuestosPrestamoCampoID+\" or ID = \"+ComportamientoPago.pagoImpuestosPlanPagoCampoID+\" or ID = \"+ComportamientoPago.fechaPrestamoCampoID+\" or ID = \"+ComportamientoPago.fechaPlanPagoCampoID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        this.initWebWorkerComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, result.recordset, ComportamientoPago);\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    initWebWorkerComportamientoPago (camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, ComportamientoPago) {\n        myWorker.postMessage([\"comportamientoPago\", camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, ComportamientoPago]);\n    }\n\n    getFieldsFromCamposTable (tabla, ComportamientoPago, banderaMetodoLlamado, callbackParam, camposDePrestamoTabla, valoresDeTablaPrestamo) {\n        let self = this;\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Campos where tablaID = \"+tabla.ID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n\n                        /*              UTILIZAR UN \"WEBPACK\" Y HACER WEB WORKER PARA GUARDAR O TRAER COSAS (sql en web worker)        */\n\n                        /*              CONSIGUIENDO VALORES DE TABLA DE PRESTAMOS         */\n                        const pool = new sql.ConnectionPool({\n                            user: tabla.usuario,\n                            password: tabla.contrasena,\n                            server: tabla.servidor,\n                            database: tabla.baseDatos,\n                            stream: true,\n                            connectionTimeout: 900000,\n                            requestTimeout: 900000,\n                            pool: {\n                                max: 40,\n                                min: 0,\n                                idleTimeoutMillis: 30000\n                            },\n                            options: {\n                                useUTC: false\n                            }\n                        });\n                        console.log('pool');\n                        console.log(pool);\n                        console.log('tabla');\n                        console.log(tabla);\n                        let camposTabla = result.recordset;\n                        console.log('camposTabla');\n                        console.log(camposTabla);\n                        pool.connect(err => {\n                            pool.request() // or: new sql.Request(pool1)\n                            .query(\"select * from \"+tabla.tabla, (err, result) => {\n                                console.log(result);\n                                console.log(err);\n                                /*var nuevoArregloTrans = [];\n                                for (var i = 0; i < result.recordset.length; i++) {\n                                    console.log(result.recordset[i]);\n                                    console.log(result.recordset[i].length);\n                                    for (var k = 0; k < result.recordset[i].length; k++) {\n                                        console.log(result.recordset[i][k]);\n                                        for (var j = 0; j < camposTabla.length; j++) {\n                                            if(j==0) {\n                                                nuevoArregloTrans.push({});\n                                                console.log(result.recordset[i]);\n                                                console.log(result.recordset[i][k]);\n                                                nuevoArregloTrans[i].camposTabla[j].nombre = result.recordset[i][k][camposTabla[j].nombre]\n                                            } else\n                                                nuevoArregloTrans[i].camposTabla[j].nombre = result.recordset[i][k][camposTabla[j].nombre]\n                                        };\n                                    }\n                                };*/\n                                for (var i = 0; i < result.recordset.length; i++) {\n                                    Object.keys(result.recordset[i]).forEach(function(key,index) {\n                                        // key: the name of the object key\n                                        // index: the ordinal position of the key within the object\n                                        if(!self.propiedadDeObjetoExisteEnTablaCampos(camposTabla, key)) {\n                                            delete result.recordset[i][key];\n                                        }\n                                    });\n                                }\n                                console.log(\"result.recordset\");\n                                console.log(result.recordset);\n                                //result.recordset = nuevoArregloTrans;\n                                if(banderaMetodoLlamado == 'prestamos')\n                                    callbackParam(camposTabla, result.recordset, ComportamientoPago);\n                                else\n                                    callbackParam(camposDePrestamoTabla, valoresDeTablaPrestamo, camposTabla, result.recordset, ComportamientoPago);\n                                //callbackParam(result.recordset, ComportamientoPago);\n                                //eval(\"this.\"+callbackParam+\"(\"+result.recordset+\", \"+camposTabla+\", \"+ComportamientoPago+\");\");\n                            });\n                        }); // fin pool connect\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    propiedadDeObjetoExisteEnTablaCampos(camposTabla, key) {\n        for (var i = 0; i < camposTabla.length; i++) {\n            if (camposTabla[i].nombre.localeCompare(key) == 0) {\n                return true;\n            }\n        };\n        return false;\n    }\n\n\n    hacerChekeosDeVariablesAlImportar () {\n        /*\n\n            EN RESULT DE CAMPOS DESPUES DE TRAER POR TABLA ID\n\n            if(result.recordset[i].tipo.localeCompare(\"bit\") == 0 || result.recordset[i].tipo.localeCompare(\"date\") == 0 || result.recordset[i].tipo.localeCompare(\"varchar\") == 0) {\n                if(result.recordset[i].tipo.localeCompare(\"bit\") == 0 || result.recordset[i].tipo.localeCompare(\"varchar\") == 0) {\n                    if(selectFieldsQueryString.length > 0)\n                        selectFieldsQueryString+=\", \";\n                    selectFieldsQueryString+=result.recordset[i].nombre;\n                } else if(result.recordset[i].tipo.localeCompare(\"date\") == 0) {\n                    if(selectFieldsQueryString.length > 0)\n                        selectFieldsQueryString+=\", \";\n                    selectFieldsQueryString+=result.recordset[i].nombre;\n                }\n            } else if(result.recordset[i].tipo.localeCompare(\"int\") == 0) {\n                if(selectFieldsQueryString.length > 0)\n                    selectFieldsQueryString+=\", \";\n                selectFieldsQueryString+=result.recordset[i].nombre;\n            }\n        */\n    }\n\n    render() {\n        return (\n            <div style={{height: \"85vh\", width: \"100%\"}}>\n                <div style={{width: \"100%\", height: \"7%\"}}>\n                    <div style={{display: \"flex\", alignItems: \"center\", justifyContent: \"center\", width: \"100%\", height: \"100%\"}}>\n                        <h2>Seleccione Tablas a Clasificar</h2>\n                    </div>\n                </div>\n                <div style={{width: \"100%\", height: \"11%\"}}>\n                    <SeleccionarTablaClasificarCarteraProceso tablasOrginales={this.state.tablasOrginales} tablasSeleccionadas={this.state.tablasSeleccionadas} selectTable={this.selectTable}> </SeleccionarTablaClasificarCarteraProceso>\n                </div>\n                <div style={{width: \"100%\", height: \"76%\"}}>\n                    <ConfiguracionTablasClasificar tablasSeleccionadas={this.state.tablasSeleccionadas} widthActual={this.state.widthActual} opcionesTabla={this.state.opcionesTablasSeleccionadas}> </ConfiguracionTablasClasificar>\n                </div>\n                <div style={{width: \"100%\", height: \"6%\", padding: \"1% 0%\"}} className={\"text-center\"}>\n                    <a onClick={this.verificarSeleccionoTablas} className={\"btn btn-primary col-xs-6 col-6\"} style={{color: \"white\", fontSize: \"1.2em\", fontWeight: \"bold\"}}>Iniciar </a>\n                </div>\n            </div>\n        );\n    }\n}\n"],"file":"ClasificarCarteraProceso.js"}