{"version":3,"sources":["components/ClasificarCarteraProceso/ClasificarCarteraProceso.js"],"names":["myWorker","Worker","tamanoFinalBandera","tamanoActualBandera","camposGuardar","ClasificarCarteraProceso","props","state","widthActual","tablasOrginales","tablasSeleccionadas","opcionesTablasSeleccionadas","loadTables","bind","selectTable","iniciarCalculo","tablasGuardarCampos","verificarGuardarCampos","verificarSeleccionoTablas","creandoArreglos","fetchDataComportamientoPago","getPrestamoTablaComportamientoPago","getPrestamoCamposDeTablaComportamientoPago","getPlanPagoTablaComportamientoPago","getPlanPagoCamposDeTablaComportamientoPago","initWebWorkerComportamientoPago","propiedadDeObjetoExisteEnTablaCampos","agregarOpciones","obtenerTipoCredito","obtenerTipoCreditoCampos","fetchDataTipoCredito","fetchDataTipoCreditoCampos","fetchDataReglasTipoCreditoCampos","verificarReglasTipoCreditoCampos","fetchDataCamposReglasTipoCreditoCampos","verificarCamposReglasTipoCreditoCampos","fetchDataValoresReglasTipoCreditoCampos","verificarValoresReglasTipoCreditoCampos","verifyTypeCreditFinal","onmessage","event","console","log","data","transaction","sql","Transaction","pool","begin","err","rolledBack","on","aborted","request","Request","query","result","rollback","commit","setState","recordset","index","existeTablaEnConf","i","length","ID","tablasSelCopiaTemp","push","undefined","tipoCreditoNombre","nombre","tipoCredito","alert","tablaID","usuario","password","contrasena","servidor","basedatos","baseDatos","tabla","ConnectionPool","user","server","database","stream","connectionTimeout","requestTimeout","max","min","idleTimeoutMillis","options","useUTC","connect","valoresTabla","identificadorCliente","filter","object","funcion","localeCompare","identificadorPrestamo","camposAGuardarCliente","camposAGuardarPrestamo","postMessage","tipo","concat","self","e","verificarComportamientoPago","verificarTipoCredito","verificarTipoCliente","verificarClasCategoria","calcularComportamientoPago","primeraVezEntra","$","prop","prestamoTablaID","ComportamientoPago","getFieldsFromCamposTable","camposDePrestamoTabla","valoresDeTablaPrestamo","planPagoTablaID","getPlanPagosCamposDeTablaComportamientoPago","camposDePlanPagoTabla","valoresDeTablaPlanPago","prestamoTabla","getFieldsComportamientoPago","idClientePrestamoCampoID","idClientePlanPagoCampoID","numeroPrestamoCampoID","numeroPlanPagoCampoID","pagoCapitalPrestamoCampoID","pagoCapitalPlanPagoCampoID","pagoImpuestosPrestamoCampoID","pagoImpuestosPlanPagoCampoID","fechaPrestamoCampoID","fechaPlanPagoCampoID","banderaMetodoLlamado","callbackParam","camposTabla","Object","keys","forEach","key","arregloCamposTipoCreditos","arregloTipoCreditos","arregloReglasDeCamposTipoCreditos","j","reglaID","regla","campoCampoID","campoValor","idsValores","valor","split","k","esListaValor","id","esLista","valorValores","arreglo","identificadorCampoNombre","verifyResultID","verifyResultField","objeto","saveResultID","idObjeto","isNaN","saveResultFieldInt","saveResultFieldString","objetoV","nombreV","identificador","idObjetoV","valorV","fecha","Date","formatDateCreation","date","monthNames","day","getDate","monthIndex","getMonth","year","getFullYear","height","width","display","alignItems","justifyContent","padding","color","fontSize","fontWeight","React","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport sql from 'mssql';\n\nimport SeleccionarTablaClasificarCarteraProceso from './SeleccionarTablaClasificarCarteraProceso.js';\nimport ConfiguracionTablasClasificar from './ConfiguracionTablasClasificar.js';\n\nconst myWorker = new Worker(\"./components/ClasificarCredito.js\");\n\nvar tamanoFinalBandera = 0, tamanoActualBandera = 0, camposGuardar;\n\nexport default class ClasificarCarteraProceso extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            widthActual: \"33%\",\n            tablasOrginales: [],\n            tablasSeleccionadas: [],\n            opcionesTablasSeleccionadas: []\n        }\n        this.loadTables = this.loadTables.bind(this);\n        this.selectTable = this.selectTable.bind(this);\n        this.iniciarCalculo = this.iniciarCalculo.bind(this);\n        this.tablasGuardarCampos = this.tablasGuardarCampos.bind(this);\n        this.verificarGuardarCampos = this.verificarGuardarCampos.bind(this);\n        this.verificarSeleccionoTablas = this.verificarSeleccionoTablas.bind(this);\n        this.creandoArreglos = this.creandoArreglos.bind(this);\n        this.fetchDataComportamientoPago = this.fetchDataComportamientoPago.bind(this);\n        this.getPrestamoTablaComportamientoPago = this.getPrestamoTablaComportamientoPago.bind(this);\n        this.getPrestamoCamposDeTablaComportamientoPago = this.getPrestamoCamposDeTablaComportamientoPago.bind(this);\n        this.getPlanPagoTablaComportamientoPago = this.getPlanPagoTablaComportamientoPago.bind(this);\n        this.getPlanPagoCamposDeTablaComportamientoPago = this.getPlanPagoCamposDeTablaComportamientoPago.bind(this);\n        this.initWebWorkerComportamientoPago = this.initWebWorkerComportamientoPago.bind(this);\n        this.propiedadDeObjetoExisteEnTablaCampos = this.propiedadDeObjetoExisteEnTablaCampos.bind(this);\n        this.agregarOpciones = this.agregarOpciones.bind(this);\n        this.obtenerTipoCredito = this.obtenerTipoCredito.bind(this);\n        this.obtenerTipoCreditoCampos = this.obtenerTipoCreditoCampos.bind(this);\n        this.fetchDataTipoCredito = this.fetchDataTipoCredito.bind(this);\n        this.fetchDataTipoCreditoCampos = this.fetchDataTipoCreditoCampos.bind(this);\n        this.fetchDataReglasTipoCreditoCampos = this.fetchDataReglasTipoCreditoCampos.bind(this);\n        this.verificarReglasTipoCreditoCampos = this.verificarReglasTipoCreditoCampos.bind(this);\n        this.fetchDataCamposReglasTipoCreditoCampos = this.fetchDataCamposReglasTipoCreditoCampos.bind(this);\n        this.verificarCamposReglasTipoCreditoCampos = this.verificarCamposReglasTipoCreditoCampos.bind(this);\n        this.fetchDataValoresReglasTipoCreditoCampos = this.fetchDataValoresReglasTipoCreditoCampos.bind(this);\n        this.verificarValoresReglasTipoCreditoCampos = this.verificarValoresReglasTipoCreditoCampos.bind(this);\n        this.verifyTypeCreditFinal = this.verifyTypeCreditFinal.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadTables();\n        //myWorker.postMessage([\"comportamientoPago\", sql]);\n        myWorker.onmessage = function (event) {\n            console.log('EN MAIN JS');\n            console.log(event.data);\n        };\n    }\n\n    loadTables() {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Tablas\", (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        this.setState({\n                            tablasOrginales: result.recordset\n                        });\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    selectTable(index) {\n        let existeTablaEnConf = false;\n        for (var i = 0; i < this.state.tablasSeleccionadas.length; i++) {\n            if(this.state.tablasOrginales[index].ID == this.state.tablasSeleccionadas[i].ID) {\n                existeTablaEnConf = true;\n                break;\n            }\n        };\n        if(!existeTablaEnConf) {\n            let tablasSelCopiaTemp = [...this.state.tablasSeleccionadas];\n            tablasSelCopiaTemp.push(this.state.tablasOrginales[index]);\n            this.setState({\n                tablasSeleccionadas: tablasSelCopiaTemp\n            });\n            if(tablasSelCopiaTemp.length == 1) {\n                this.setState({\n                    widthActual: \"100%\"\n                });\n            } else if(tablasSelCopiaTemp.length == 2) {\n                this.setState({\n                    widthActual: \"50%\"\n                });\n            } else {\n                this.setState({\n                    widthActual: \"33%\"\n                });\n            }\n            this.agregarOpciones(this.state.tablasOrginales[index].ID);\n        }\n    }\n\n    //metodo para agregar tipo de credito, tipo de cliente, criterios de clasificacion por tabla\n    agregarOpciones(index) {\n        //opcionesTablasSeleccionadas\n        this.obtenerTipoCredito(index);\n    }\n\n    obtenerTipoCredito(index) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from TipoCredito where tablaID = \"+index, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        let tablasSelCopiaTemp = [...this.state.opcionesTablasSeleccionadas];\n                        if(tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1] == undefined)\n                            tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1] = {};\n                        tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1].tipoCreditoNombre = result.recordset[0].nombre;\n                        this.setState({\n                            opcionesTablasSeleccionadas: tablasSelCopiaTemp\n                        });\n                        this.obtenerTipoCreditoCampos(result.recordset[0].ID);\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    obtenerTipoCreditoCampos (ID) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from TipoCreditoCampo where tipoCreditoID = \"+ID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        let tablasSelCopiaTemp = [...this.state.opcionesTablasSeleccionadas];\n                        if(tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1] == undefined)\n                            tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1] = {};\n                        tablasSelCopiaTemp[this.state.tablasSeleccionadas.length-1].tipoCredito = result.recordset;\n                        this.setState({\n                            opcionesTablasSeleccionadas: tablasSelCopiaTemp\n                        });\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    verificarSeleccionoTablas() {\n        if(this.state.tablasSeleccionadas.length > 0) {\n            this.creandoArreglos();\n        } else {\n            alert(\"Seleccione por lo menos una tabla\");\n        }\n    }\n\n    creandoArreglos() {\n        camposGuardar = [];\n        for (var i = 0; i < this.state.tablasSeleccionadas.length; i++) {\n            this.tablasGuardarCampos(this.state.tablasSeleccionadas[i].ID);\n        };\n\n        /*for (var i = 0; i < this.state.tablasSeleccionadas.length; i++) {\n            //this.state.tablasSeleccionadas[i]\n            var calcularComportamientoPago = false;\n            var primeraVezEntra = true; //agregar valores de tabla a arreglo global de clientes, prestamos y pagos en ClasificarCartera.js\n            if($(\"#ComportamientoPago\"+i).prop('checked') == true)\n                calcularComportamientoPago = true;\n\n            if(calcularComportamientoPago) {\n                this.fetchDataComportamientoPago(this.state.tablasSeleccionadas[i].ID);\n                if(primeraVezEntra) {\n                    primeraVezEntra = false;\n                }\n            }\n            this.fetchDataTipoCredito(this.state.tablasSeleccionadas[i].ID);\n        };*/\n    }\n\n\n\n    /*      \n        *****   *****   *****       *****   *****   *****   *****\n                        INICIAR ARREGLOS\n        *****   *****   *****       *****   *****   *****   *****\n    */\n\n    tablasGuardarCampos (tablaID) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Tablas where ID = \"+tablaID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        var usuario = result.recordset[0].usuario;\n                        var password = result.recordset[0].contrasena;\n                        var servidor = result.recordset[0].servidor;\n                        var basedatos = result.recordset[0].baseDatos;\n                        var tabla = result.recordset[0].tabla;\n\n                        /*              CONSIGUIENDO VALORES DE TABLA         */\n                        const pool = new sql.ConnectionPool({\n                            user: usuario,\n                            password: password,\n                            server: servidor,\n                            database: basedatos,\n                            stream: true,\n                            connectionTimeout: 900000,\n                            requestTimeout: 900000,\n                            pool: {\n                                max: 40,\n                                min: 0,\n                                idleTimeoutMillis: 30000\n                            },\n                            options: {\n                                useUTC: false\n                            }\n                        });\n                        pool.connect(err => {\n                            pool.request() // or: new sql.Request(pool1)\n                            .query(\"select * from \"+tabla, (err, result) => {\n                                if(result != undefined) {\n                                    this.verificarGuardarCampos(tablaID, result.recordset);\n                                } else {\n                                    //agregar error fallo connecion tabla (no existe o malos campos)\n                                }\n                            });\n                        }); // fin pool connect\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    verificarGuardarCampos (tablaID, valoresTabla) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Campos where tablaID = \"+tablaID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        var identificadorCliente = result.recordset.filter(function( object ) {\n                                                        return object.funcion.localeCompare(\"Identificador\") == 0 && object.tabla.localeCompare(\"Cliente\") == 0;\n                                                    });\n                        var identificadorPrestamo = result.recordset.filter(function( object ) {\n                                                        return object.funcion.localeCompare(\"Identificador\") == 0 && object.tabla.localeCompare(\"Préstamo\") == 0;\n                                                    });\n                        var camposAGuardarCliente = result.recordset.filter(function( object ) {\n                                                        return object.tabla.localeCompare(\"Cliente\") == 0;\n                                                    });\n                        var camposAGuardarPrestamo = result.recordset.filter(function( object ) {\n                                                        return object.tabla.localeCompare(\"Préstamo\") == 0;\n                                                    });\n                        if(identificadorCliente.length == 0 && identificadorPrestamo.length == 0) {\n                            alert(\"Tiene que ingresar un campo Identificador para Cliente o para Préstamo\");\n                        } else {\n                            //viendo si se llama metodo crear arreglo para clientes y prestamos o solo uno\n                            if(identificadorCliente.length > 0 && identificadorPrestamo.length > 0) {\n                                myWorker.postMessage([\"iniciarArregloClientes\", valoresTabla, identificadorCliente[0].nombre, identificadorCliente[0].tipo, camposAGuardarCliente, false]);\n                                myWorker.postMessage([\"iniciarArregloPrestamos\", valoresTabla, identificadorCliente[0].nombre, identificadorPrestamo[0].nombre, identificadorCliente[0].tipo, identificadorPrestamo[0].tipo, camposAGuardarPrestamo, true]);\n                                camposGuardar.concat(result.recordset);\n                                let self = this;\n                                myWorker.onmessage = function(e) {\n                                    if(e.data == 'terminoCrearArreglos') {\n                                        //revisando que procedimientos llamar\n                                        self.iniciarCalculo(true, true, true, true);\n                                    }\n                                }\n                            } else {\n                                if(identificadorCliente.length > 0) {\n                                    myWorker.postMessage([\"iniciarArregloClientes\", valoresTabla, identificadorCliente[0].nombre, identificadorCliente[0].tipo, camposAGuardarCliente, true]);\n                                    let self = this;\n                                    camposGuardar.concat(result.recordset);\n                                    myWorker.onmessage = function(e) {\n                                        console.log(\"llamado de vuelta\");\n                                        console.log(e);\n                                        if(e.data == 'terminoCrearArreglos') {\n                                            //revisando que procedimientos llamar\n                                            self.iniciarCalculo(false, false, true, false);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    iniciarCalculo (verificarComportamientoPago, verificarTipoCredito, verificarTipoCliente, verificarClasCategoria) {\n        //como no tiene id prestamo o cliente, no se puede calcular comportamiento plan pago, agregar mensaje bitacora  // si verificarComportamientoPago == false\n        for (var i = 0; i < this.state.tablasSeleccionadas.length; i++) {\n            var calcularComportamientoPago = false;\n            var primeraVezEntra = true; //agregar valores de tabla a arreglo global de clientes, prestamos y pagos en ClasificarCartera.js\n\n            //como no tiene id prestamo o cliente, no se puede calcular comportamiento plan pago, agregar mensaje bitacora  // si verificarComportamientoPago == false\n\n            if(verificarComportamientoPago && $(\"#ComportamientoPago\"+i).prop('checked') == true)\n                calcularComportamientoPago = true;\n\n            if(calcularComportamientoPago) {\n                this.fetchDataComportamientoPago(this.state.tablasSeleccionadas[i].ID);\n                if(primeraVezEntra) {\n                    primeraVezEntra = false;\n                }\n            }\n            if(verificarTipoCredito) {\n                this.fetchDataTipoCredito(this.state.tablasSeleccionadas[i].ID);\n            }\n        };\n    }\n\n    /*      \n        *****   *****   *****       *****   *****   *****   *****\n                        INICIAR ARREGLOS\n        *****   *****   *****       *****   *****   *****   *****\n    */\n\n\n\n\n\n\n    /*      \n        *****   *****   *****       *****   *****   *****   *****\n                        COMPORTAMIENTO PAGO\n        *****   *****   *****       *****   *****   *****   *****\n    */\n\n    fetchDataComportamientoPago (prestamoTablaID) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from ComportamientoPago where prestamoTablaID = \"+prestamoTablaID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        for (var i = 0; i < result.recordset.length; i++) {\n                            this.getPrestamoTablaComportamientoPago(result.recordset[i]);\n                        }\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    getPrestamoTablaComportamientoPago(ComportamientoPago) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Tablas where ID = \"+ComportamientoPago.prestamoTablaID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        this.getPrestamoCamposDeTablaComportamientoPago(result.recordset[0], ComportamientoPago);\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    getPrestamoCamposDeTablaComportamientoPago(tabla, ComportamientoPago) {\n        let self = this;\n        this.getFieldsFromCamposTable(tabla, ComportamientoPago, \"prestamos\", function(camposDePrestamoTabla, valoresDeTablaPrestamo, ComportamientoPago) {\n            self.getPlanPagoTablaComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, ComportamientoPago);\n        });\n    }\n\n    getPlanPagoTablaComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, ComportamientoPago) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Tablas where ID = \"+ComportamientoPago.planPagoTablaID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        this.getPlanPagosCamposDeTablaComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, result.recordset[0], ComportamientoPago);\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    getPlanPagosCamposDeTablaComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, tabla, ComportamientoPago) {\n        let self = this;\n        this.getFieldsFromCamposTable(tabla, ComportamientoPago, \"planpagos\", function(camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, ComportamientoPago) {\n            self.initWebWorkerComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, ComportamientoPago);\n        }, camposDePrestamoTabla, valoresDeTablaPrestamo);\n    }\n\n    getPlanPagoCamposDeTablaComportamientoPago(prestamoTabla, camposDePrestamoTabla, tabla, ComportamientoPago) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Campos where tablaID = \"+tabla.ID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n\n                        /*              CONSIGUIENDO VALORES DE TABLA DE PLAN DE PAGOS         */\n                        const pool = new sql.ConnectionPool({\n                            user: tabla.usuario,\n                            password: tabla.contrasena,\n                            server: tabla.servidor,\n                            database: tabla.baseDatos,\n                            stream: true,\n                            connectionTimeout: 900000,\n                            requestTimeout: 900000,\n                            pool: {\n                                max: 40,\n                                min: 0,\n                                idleTimeoutMillis: 30000\n                            },\n                            options: {\n                                useUTC: false\n                            }\n                        });\n                        pool.connect(err => {\n                            pool.request() // or: new sql.Request(pool1)\n                            .query(\"select * from \"+tabla.tabla, (err, result) => {\n                                this.getFieldsComportamientoPago(prestamoTabla, camposDePrestamoTabla, result.recordset, ComportamientoPago);\n                            });\n                        }); // fin pool connect\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    getFieldsComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, ComportamientoPago) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Campos where ID = \"+ComportamientoPago.idClientePrestamoCampoID+\" or ID = \"+ComportamientoPago.idClientePlanPagoCampoID+\" or ID = \"+ComportamientoPago.numeroPrestamoCampoID+\" or ID = \"+ComportamientoPago.numeroPlanPagoCampoID+\" or ID = \"+ComportamientoPago.pagoCapitalPrestamoCampoID+\" or ID = \"+ComportamientoPago.pagoCapitalPlanPagoCampoID+\" or ID = \"+ComportamientoPago.pagoImpuestosPrestamoCampoID+\" or ID = \"+ComportamientoPago.pagoImpuestosPlanPagoCampoID+\" or ID = \"+ComportamientoPago.fechaPrestamoCampoID+\" or ID = \"+ComportamientoPago.fechaPlanPagoCampoID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        this.initWebWorkerComportamientoPago(camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, result.recordset, ComportamientoPago);\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    initWebWorkerComportamientoPago (camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, ComportamientoPago) {\n        myWorker.postMessage([\"comportamientoPago\", camposDePrestamoTabla, valoresDeTablaPrestamo, camposDePlanPagoTabla, valoresDeTablaPlanPago, ComportamientoPago]);\n    }\n\n    getFieldsFromCamposTable (tabla, ComportamientoPago, banderaMetodoLlamado, callbackParam, camposDePrestamoTabla, valoresDeTablaPrestamo) {\n        let self = this;\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Campos where tablaID = \"+tabla.ID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n\n                        /*              UTILIZAR UN \"WEBPACK\" Y HACER WEB WORKER PARA GUARDAR O TRAER COSAS (sql en web worker)        */\n\n                        /*              CONSIGUIENDO VALORES DE TABLA DE PRESTAMOS         */\n                        const pool = new sql.ConnectionPool({\n                            user: tabla.usuario,\n                            password: tabla.contrasena,\n                            server: tabla.servidor,\n                            database: tabla.baseDatos,\n                            stream: true,\n                            connectionTimeout: 900000,\n                            requestTimeout: 900000,\n                            pool: {\n                                max: 40,\n                                min: 0,\n                                idleTimeoutMillis: 30000\n                            },\n                            options: {\n                                useUTC: false\n                            }\n                        });\n                        console.log('pool');\n                        console.log(pool);\n                        console.log('tabla');\n                        console.log(tabla);\n                        let camposTabla = result.recordset;\n                        console.log('camposTabla');\n                        console.log(camposTabla);\n                        pool.connect(err => {\n                            pool.request() // or: new sql.Request(pool1)\n                            .query(\"select * from \"+tabla.tabla, (err, result) => {\n                                console.log(result);\n                                console.log(err);\n                                /*var nuevoArregloTrans = [];\n                                for (var i = 0; i < result.recordset.length; i++) {\n                                    console.log(result.recordset[i]);\n                                    console.log(result.recordset[i].length);\n                                    for (var k = 0; k < result.recordset[i].length; k++) {\n                                        console.log(result.recordset[i][k]);\n                                        for (var j = 0; j < camposTabla.length; j++) {\n                                            if(j==0) {\n                                                nuevoArregloTrans.push({});\n                                                console.log(result.recordset[i]);\n                                                console.log(result.recordset[i][k]);\n                                                nuevoArregloTrans[i].camposTabla[j].nombre = result.recordset[i][k][camposTabla[j].nombre]\n                                            } else\n                                                nuevoArregloTrans[i].camposTabla[j].nombre = result.recordset[i][k][camposTabla[j].nombre]\n                                        };\n                                    }\n                                };*/\n                                for (var i = 0; i < result.recordset.length; i++) {\n                                    Object.keys(result.recordset[i]).forEach(function(key,index) {\n                                        // key: the name of the object key\n                                        // index: the ordinal position of the key within the object\n                                        if(!self.propiedadDeObjetoExisteEnTablaCampos(camposTabla, key)) {\n                                            delete result.recordset[i][key];\n                                        }\n                                    });\n                                }\n                                console.log(\"result.recordset\");\n                                console.log(result.recordset);\n                                //result.recordset = nuevoArregloTrans;\n                                if(banderaMetodoLlamado == 'prestamos')\n                                    callbackParam(camposTabla, result.recordset, ComportamientoPago);\n                                else\n                                    callbackParam(camposDePrestamoTabla, valoresDeTablaPrestamo, camposTabla, result.recordset, ComportamientoPago);\n                                //callbackParam(result.recordset, ComportamientoPago);\n                                //eval(\"this.\"+callbackParam+\"(\"+result.recordset+\", \"+camposTabla+\", \"+ComportamientoPago+\");\");\n                            });\n                        }); // fin pool connect\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    propiedadDeObjetoExisteEnTablaCampos(camposTabla, key) {\n        for (var i = 0; i < camposTabla.length; i++) {\n            if (camposTabla[i].nombre.localeCompare(key) == 0) {\n                return true;\n            }\n        };\n        return false;\n    }\n\n\n    hacerChekeosDeVariablesAlImportar () {\n        /*\n\n            EN RESULT DE CAMPOS DESPUES DE TRAER POR TABLA ID\n\n            if(result.recordset[i].tipo.localeCompare(\"bit\") == 0 || result.recordset[i].tipo.localeCompare(\"date\") == 0 || result.recordset[i].tipo.localeCompare(\"varchar\") == 0) {\n                if(result.recordset[i].tipo.localeCompare(\"bit\") == 0 || result.recordset[i].tipo.localeCompare(\"varchar\") == 0) {\n                    if(selectFieldsQueryString.length > 0)\n                        selectFieldsQueryString+=\", \";\n                    selectFieldsQueryString+=result.recordset[i].nombre;\n                } else if(result.recordset[i].tipo.localeCompare(\"date\") == 0) {\n                    if(selectFieldsQueryString.length > 0)\n                        selectFieldsQueryString+=\", \";\n                    selectFieldsQueryString+=result.recordset[i].nombre;\n                }\n            } else if(result.recordset[i].tipo.localeCompare(\"int\") == 0) {\n                if(selectFieldsQueryString.length > 0)\n                    selectFieldsQueryString+=\", \";\n                selectFieldsQueryString+=result.recordset[i].nombre;\n            }\n        */\n    }\n\n    /*      \n        *****   *****   *****       *****   *****   *****   *****\n                        COMPORTAMIENTO PAGO\n        *****   *****   *****       *****   *****   *****   *****\n    */\n\n\n\n\n\n\n\n    /*      \n        *****   *****   *****       *****   *****   *****   *****\n                        TIPO DE CREDITOS\n        *****   *****   *****       *****   *****   *****   *****\n    */\n\n    fetchDataTipoCredito (tablaID) {\n        console.log(\"tablaID = \"+tablaID);\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from TipoCredito where tablaID = \"+tablaID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        //arregloCamposTipoCreditos: Cada posicion del arreglo corresponde a la del tipo de credito\n                        var arregloCamposTipoCreditos = [];\n                        console.log(result.recordset);\n                        tamanoFinalBandera = result.recordset.length; \n                        for (var i = 0; i < result.recordset.length; i++) {\n                            this.fetchDataTipoCreditoCampos(result.recordset[i], arregloCamposTipoCreditos, i, result.recordset);\n                        }\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    fetchDataTipoCreditoCampos (tipoCredito, arregloCamposTipoCreditos, i, arregloTipoCreditos) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from TipoCreditoCampo where tipoCreditoID = \"+tipoCredito.ID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        console.log('TipoCreditoCampo');\n                        console.log(result.recordset);\n                        tamanoActualBandera++;\n                        arregloCamposTipoCreditos[i] = result.recordset;\n                        this.verificarReglasTipoCreditoCampos(arregloTipoCreditos, arregloCamposTipoCreditos);\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    verificarReglasTipoCreditoCampos (arregloTipoCreditos, arregloCamposTipoCreditos) {\n        console.log(\"tamanoActualBandera = \"+tamanoActualBandera);\n        console.log(\"tamanoFinalBandera = \"+tamanoFinalBandera);\n        //AQUI arregloCamposTipoCreditos verificar si tiene campos\n        if(tamanoActualBandera == tamanoFinalBandera) {\n            //arregloReglasDeCamposTipoCreditos: Cada posicion del arreglo corresponde a la del campo de tipo de credito\n            var arregloReglasDeCamposTipoCreditos = [];\n            tamanoActualBandera = 0, tamanoFinalBandera = 0;\n            for (var i = 0; i < arregloCamposTipoCreditos.length; i++) {\n                for (var j = 0; j < arregloCamposTipoCreditos[i].length; j++) {\n                    tamanoFinalBandera++;\n                };\n            };\n            for (var i = 0; i < arregloCamposTipoCreditos.length; i++) {\n                if(arregloReglasDeCamposTipoCreditos[i] ==  undefined)\n                    arregloReglasDeCamposTipoCreditos[i] = [];\n                for (var j = 0; j < arregloCamposTipoCreditos[i].length; j++) {\n                    this.fetchDataReglasTipoCreditoCampos(arregloCamposTipoCreditos[i][j], arregloReglasDeCamposTipoCreditos, i, j, arregloTipoCreditos, arregloCamposTipoCreditos);\n                };\n            };\n        }\n    }\n\n    fetchDataReglasTipoCreditoCampos (tipoCredito, arregloReglasDeCamposTipoCreditos, i, j, arregloTipoCreditos, arregloCamposTipoCreditos) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Reglas where ID = \"+tipoCredito.reglaID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        console.log('Reglas');\n                        console.log(result.recordset);\n                        tamanoActualBandera++;\n                        arregloReglasDeCamposTipoCreditos[i][j] = result.recordset[0];\n                        this.verificarCamposReglasTipoCreditoCampos(arregloTipoCreditos, arregloCamposTipoCreditos, arregloReglasDeCamposTipoCreditos);\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    verificarCamposReglasTipoCreditoCampos (arregloTipoCreditos, arregloCamposTipoCreditos, arregloReglasDeCamposTipoCreditos) {\n        if(tamanoActualBandera == tamanoFinalBandera) {\n            tamanoActualBandera = 0, tamanoFinalBandera = 0;\n            for (var i = 0; i < arregloReglasDeCamposTipoCreditos.length; i++) {\n                for (var j = 0; j < arregloReglasDeCamposTipoCreditos[i].length; j++) {\n                    tamanoFinalBandera++;\n                };\n            };\n            for (var i = 0; i < arregloReglasDeCamposTipoCreditos.length; i++) {\n                for (var j = 0; j < arregloReglasDeCamposTipoCreditos[i].length; j++) {\n                    this.fetchDataCamposReglasTipoCreditoCampos(arregloReglasDeCamposTipoCreditos[i][j], arregloReglasDeCamposTipoCreditos, i, j, arregloTipoCreditos, arregloCamposTipoCreditos);\n                };\n            };\n        }\n    }\n\n    fetchDataCamposReglasTipoCreditoCampos (regla, arregloReglasDeCamposTipoCreditos, i, j, arregloTipoCreditos, arregloCamposTipoCreditos) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Campos where ID = \"+regla.campoCampoID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        console.log('Campos');\n                        console.log(result.recordset);\n                        tamanoActualBandera++;\n                        arregloReglasDeCamposTipoCreditos[i][j].campoValor = result.recordset[0];\n                        this.verificarValoresReglasTipoCreditoCampos(arregloTipoCreditos, arregloCamposTipoCreditos, arregloReglasDeCamposTipoCreditos);\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    verificarValoresReglasTipoCreditoCampos (arregloTipoCreditos, arregloCamposTipoCreditos, arregloReglasDeCamposTipoCreditos) {\n        if(tamanoActualBandera == tamanoFinalBandera) {\n            tamanoActualBandera = 0, tamanoFinalBandera = 0;\n            for (var i = 0; i < arregloReglasDeCamposTipoCreditos.length; i++) {\n                for (var j = 0; j < arregloReglasDeCamposTipoCreditos[i].length; j++) {\n                    var idsValores = arregloReglasDeCamposTipoCreditos[i][j].valor.split(\",\");\n                    for (var k = 0; k < idsValores.length; k++) {\n                        tamanoFinalBandera++;\n                    };\n                };\n            };\n            for (var i = 0; i < arregloReglasDeCamposTipoCreditos.length; i++) {\n                for (var j = 0; j < arregloReglasDeCamposTipoCreditos[i].length; j++) {\n                    var idsValores = arregloReglasDeCamposTipoCreditos[i][j].valor.split(\",\");\n                    for (var k = 0; k < idsValores.length; k++) {\n                        this.fetchDataValoresReglasTipoCreditoCampos(idsValores[k], arregloReglasDeCamposTipoCreditos[i][j].esListaValor, arregloReglasDeCamposTipoCreditos, i, j, arregloTipoCreditos, arregloCamposTipoCreditos);\n                    };\n                };\n            };\n        }\n    }\n\n    fetchDataValoresReglasTipoCreditoCampos (id, esLista, arregloReglasDeCamposTipoCreditos, i, j, arregloTipoCreditos, arregloCamposTipoCreditos) {\n        var tabla;\n        if(esLista)\n            tabla = 'VariablesdeLista';\n        else\n            tabla = 'Campos';\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from \"+tabla+\" where ID = \"+id, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        console.log(tabla);\n                        console.log(result.recordset);\n                        tamanoActualBandera++;\n                        if(arregloReglasDeCamposTipoCreditos[i][j].valorValores == undefined)\n                            arregloReglasDeCamposTipoCreditos[i][j].valorValores = [];\n                        arregloReglasDeCamposTipoCreditos[i][j].valorValores.push(result.recordset[0]);\n                        this.verifyTypeCreditFinal(arregloTipoCreditos, arregloCamposTipoCreditos, arregloReglasDeCamposTipoCreditos)\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    verifyTypeCreditFinal (arregloTipoCreditos, arregloCamposTipoCreditos, arregloReglasDeCamposTipoCreditos) {\n        console.log(\"tamanoActualBandera = \"+tamanoActualBandera);\n        console.log(\"tamanoFinalBandera = \"+tamanoFinalBandera);\n        if(tamanoActualBandera == tamanoFinalBandera) {\n            console.log(arregloTipoCreditos);\n            console.log(arregloCamposTipoCreditos);\n            console.log(arregloReglasDeCamposTipoCreditos);\n            myWorker.postMessage([\"tiposCredito\", arregloTipoCreditos, arregloCamposTipoCreditos, arregloReglasDeCamposTipoCreditos]);\n        }\n    }\n\n    /*      \n        *****   *****   *****       *****   *****   *****   *****\n                        TIPO DE CREDITOS\n        *****   *****   *****       *****   *****   *****   *****\n    */\n\n\n\n\n\n\n\n\n\n    /*      \n        *****   *****   *****       *****   *****   *****   *****\n                        GUARDAR RESULTADOS\n        *****   *****   *****       *****   *****   *****   *****\n    */\n\n    iterateProperties (arreglo) {\n        for (var i = 0; i < arreglo.length; i++) {\n            var identificadorCampoNombre;\n            Object.keys(arreglo[i]).forEach(function(key,index) {\n                // key: the name of the object key\n                // index: the ordinal position of the key within the object\n                identificadorCampoNombre = camposGuardar.filter(function( object ) {\n                                return object.nombre.localeCompare(key) == 0 && object.funcion.localeCompare(\"Identificador\") == 0;\n                            });\n            });\n            if(identificadorCampoNombre.length > 0) {\n                Object.keys(arreglo[i]).forEach(function(key,index) {\n                    // key: the name of the object key\n                    // index: the ordinal position of the key within the object\n                    console.log(\"key\");\n                    console.log(key);\n                    console.log(\"arreglo[i]\");\n                    console.log(arreglo[i]);\n                    console.log(\"arreglo[i][key]\");\n                    console.log(arreglo[i][key]);\n                    if(identificadorCampoNombre[0].funcion.localeCompare(\"Identificador\") == 0) {\n                        this.verifyResultID(identificadorCampoNombre[0].nombre, identificadorCampoNombre[0].tabla, key);\n                    } else {\n                        this.verifyResultField(identificadorCampoNombre[0].nombre, identificadorCampoNombre[0].tabla, key, arreglo[i][key]);\n                    }\n                });\n            } else {\n                //bitacora no existe campo id\n            }\n        };\n    }\n\n    verifyResultID(valor, objeto, nombre) {\n        console.log(prop);\n        this.saveResultID(valor, objeto, nombre);\n    }\n\n    verifyResultField(idObjeto, objeto, nombre, valor) {\n        if(!isNaN(valor)) {\n            saveResultFieldInt(idObjeto, objeto, nombre, valor);\n        } else {\n            saveResultFieldString(idObjeto, objeto, nombre, valor);\n        }\n    }\n\n    saveResultID (valor, objetoV, nombreV) {\n        var identificador = valor;\n        var objeto = objetoV;\n        var nombre = nombreV;\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"insert into ResultadosID values (identificador, objeto, nombre)\", (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    saveResultFieldInt (idObjetoV, objetoV, nombreV, valorV) {\n        var identificador = idObjetoV;\n        var objeto = objetoV;\n        var nombre = nombreV;\n        var fecha = new Date();\n        var valor = valorV;\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"insert into ResultadosInt values ('\"+idObjeto+\"', '\"+objeto+\"', '\"+nombre+\"', '\"+this.formatDateCreation(fecha)+\"', \"+valor+\")\", (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    saveResultFieldString (idObjetoV, objetoV, nombreV, valorV) {\n        var identificador = idObjetoV;\n        var objeto = objetoV;\n        var nombre = nombreV;\n        var fecha = new Date();\n        var valor = valorV;\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"insert into ResultadosString values ('\"+idObjeto+\"', '\"+objeto+\"', '\"+nombre+\"', '\"+this.formatDateCreation(fecha)+\"', '\"+valor+\"')\", (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    formatDateCreation(date) {\n        //formato si es STRING\n        //aaaa/mm/dd\n        //aaaa-mm-dd\n        var monthNames = [\n            \"Ene\", \"Feb\", \"Mar\",\n            \"Abr\", \"May\", \"Jun\", \"Jul\",\n            \"Ago\", \"Sep\", \"Oct\",\n            \"Nov\", \"Dec\"\n        ];\n\n        var day = date.getDate();\n        var monthIndex = date.getMonth();\n        monthIndex++;\n        var year = date.getFullYear();\n        return year + '-' + monthIndex + '-' + day;\n    }\n\n    render() {\n        return (\n            <div style={{height: \"85vh\", width: \"100%\"}}>\n                <div style={{width: \"100%\", height: \"7%\"}}>\n                    <div style={{display: \"flex\", alignItems: \"center\", justifyContent: \"center\", width: \"100%\", height: \"100%\"}}>\n                        <h2>Seleccione Tablas a Clasificar</h2>\n                    </div>\n                </div>\n                <div style={{width: \"100%\", height: \"11%\"}}>\n                    <SeleccionarTablaClasificarCarteraProceso tablasOrginales={this.state.tablasOrginales} tablasSeleccionadas={this.state.tablasSeleccionadas} selectTable={this.selectTable}> </SeleccionarTablaClasificarCarteraProceso>\n                </div>\n                <div style={{width: \"100%\", height: \"76%\"}}>\n                    <ConfiguracionTablasClasificar tablasSeleccionadas={this.state.tablasSeleccionadas} widthActual={this.state.widthActual} opcionesTabla={this.state.opcionesTablasSeleccionadas}> </ConfiguracionTablasClasificar>\n                </div>\n                <div style={{width: \"100%\", height: \"6%\", padding: \"1% 0%\"}} className={\"text-center\"}>\n                    <a onClick={this.verificarSeleccionoTablas} className={\"btn btn-primary col-xs-6 col-6\"} style={{color: \"white\", fontSize: \"1.2em\", fontWeight: \"bold\"}}>Iniciar </a>\n                </div>\n            </div>\n        );\n    }\n}\n"],"file":"ClasificarCarteraProceso.js"}